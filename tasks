import java.util.Scanner;
import java.time.format.DateTimeParseException;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Выберите задачу (1-20) или 0 для выхода:");
            int choice = scanner.nextInt();
            scanner.nextLine();

            try {
                switch (choice) {
                    case 1:
                        System.out.println("Введите два числа:");
                        int a1 = scanner.nextInt();
                        int a2 = scanner.nextInt();
                        System.out.println("Максимум: " + max(a1, a2));
                        break;
                    case 2:
                        System.out.println("Введите два числа для деления:");
                        int dividend = scanner.nextInt();
                        int divisor = scanner.nextInt();
                        System.out.println("Результат деления: " + safeDivision(dividend, divisor));
                        break;
                    case 3:
                        System.out.println("Введите строку для конвертации в число:");
                        String str = scanner.nextLine();
                        System.out.println("Конвертация строки в число: " + stringToInteger(str));
                        break;
                    case 4:
                        System.out.println("Введите возраст:");
                        int age = scanner.nextInt();
                        checkAge(age);
                        System.out.println("Возраст корректен.");
                        break;
                    case 5:
                        System.out.println("Введите число для нахождения корня:");
                        double number1 = scanner.nextDouble();
                        System.out.println("Корень: " + findSquareRoot(number1));
                        break;
                    case 6:
                        System.out.println("Введите число для факториала:");
                        int n = scanner.nextInt();
                        System.out.println("Факториал: " + factorial(n));
                        break;
                    case 7:
                        System.out.println("Введите размер массива:");
                        int size = scanner.nextInt();
                        int[] array1 = new int[size];
                        System.out.println("Введите элементы массива:");
                        for (int i = 0; i < size; i++) {
                            array1[i] = scanner.nextInt();
                        }
                        checkForZeros(array1);
                        System.out.println("Массив не содержит нулей.");
                        break;
                    case 8:
                        System.out.println("Введите основание и степень:");
                        double base = scanner.nextDouble();
                        int exponent = scanner.nextInt();
                        System.out.println("Результат возведения в степень: " + power(base, exponent));
                        break;
                    case 9:
                        System.out.println("Введите строку и длину для обрезки:");
                        String strToTrim = scanner.nextLine();
                        int length = scanner.nextInt();
                        System.out.println("Обрезанная строка: " + trimString(strToTrim, length));
                        break;
                    case 10:
                        System.out.println("Введите размер массива:");
                        int arraySize = scanner.nextInt();
                        int[] arrayToSearch = new int[arraySize];
                        System.out.println("Введите элементы массива:");
                        for (int i = 0; i < arraySize; i++) {
                            arrayToSearch[i] = scanner.nextInt();
                        }
                        System.out.println("Введите элемент для поиска:");
                        int element = scanner.nextInt();
                        System.out.println("Индекс элемента: " + findInArray(arrayToSearch, element));
                        break;
                    case 11:
                        System.out.println("Введите число для конвертации в двоичную систему:");
                        int number2 = scanner.nextInt();
                        System.out.println("Двоичное представление: " + toBinary(number2));
                        break;
                    case 12:
                        System.out.println("Введите два числа для проверки делимости:");
                        int aDivisible = scanner.nextInt();
                        int bDivisible = scanner.nextInt();
                        checkDivisibility(aDivisible, bDivisible);
                        System.out.println(aDivisible + " делится на " + bDivisible);
                        break;
                    case 13:
                        System.out.println("Введите элементы списка (разделите пробелами):");
                        String[] listElements = scanner.nextLine().split(" ");
                        System.out.println("Введите индекс элемента для чтения:");
                        int index = scanner.nextInt();
                        System.out.println("Элемент: " + readListElement(java.util.Arrays.asList(listElements), index));
                        break;
                    case 14:
                        System.out.println("Введите пароль для проверки:");
                        String password = scanner.nextLine();
                        checkPasswordStrength(password);
                        System.out.println("Пароль можно использовать.");
                        break;
                    case 15:
                        System.out.println("Введите дату в формате dd.MM.yyyy:");
                        String date = scanner.nextLine();
                        checkDate(date);
                        System.out.println("Дата корректна.");
                        break;
                    case 16:
                        System.out.println("Введите две строки для конкатенации:");
                        String str1 = scanner.nextLine();
                        String str2 = scanner.nextLine();
                        System.out.println("Конкатенация строк: " + concatenate(str1, str2));
                        break;
                    case 17:
                        System.out.println("Введите два числа для нахождения остатка от деления:");
                        int aRemainder = scanner.nextInt();
                        int bRemainder = scanner.nextInt();
                        System.out.println("Остаток: " + remainder(aRemainder, bRemainder));
                        break;
                    case 18:
                        System.out.println("Введите число для нахождения квадратного корня:");
                        double number3 = scanner.nextDouble();
                        System.out.println("Квадратный корень: " + squareRoot(number3));
                        break;
                    case 19:
                        System.out.println("Введите температуру в Цельсиях:");
                        double celsius = scanner.nextDouble();
                        System.out.println("Температура в Фаренгейте: " + celsiusToFahrenheit(celsius));
                        break;
                    case 20:
                        System.out.println("Введите строку для проверки на пустоту:");
                        String strToCheck = scanner.nextLine();
                        checkString(strToCheck);
                        System.out.println("Строка не пустая.");
                        break;
                    case 0:
                        System.out.println("Выход из программы.");
                        return;
                    default:
                        System.out.println("Неверный выбор. Пожалуйста, попробуйте еще раз.");
                }
            } catch (Exception e) {
                System.out.println("Ошибка: " + e.getMessage());
                scanner.nextLine();
            }
        }
    }

    // 1. Функция для нахождения максимума
    public static int max(int a, int b) {
        if (a == b) throw new IllegalArgumentException("Числа равны!");
        return Math.max(a, b);
    }

    // 2. Калькулятор деления
    public static double safeDivision(int a, int b) {
        if (b == 0) throw new ArithmeticException("Деление на ноль недопустимо!");
        return (double) a / b;
    }

    // 3. Конвертер строк в числа
    public static int stringToInteger(String str) {
        try {
            return Integer.parseInt(str);
        } catch (NumberFormatException e) {
            throw new NumberFormatException("Невозможно конвертировать строку в число: " + str);
        }
    }

    // 4. Проверка возраста
    public static void checkAge(int age) {
        if (age < 0 || age > 150)
            throw new IllegalArgumentException("Некорректный возраст: " + age);
    }

    // 5. Нахождение корня
    public static double findSquareRoot(double number) {
        if (number < 0)
            throw new IllegalArgumentException("Отрицательное число: " + number);
        return Math.sqrt(number);
    }

    // 6. Факториал
    public static long factorial(int n) {
        if (n < 0) throw new IllegalArgumentException("Отрицательное число для факториала: " + n);
        long result = 1;
        for (int i = 1; i <= n; i++) {
            result *= i;
        }
        return result;
    }

    // 7. Проверка массива на нули
    public static void checkForZeros(int[] array) {
        for (int num : array) {
            if (num == 0) throw new NullPointerException("Массив содержит нули!");
        }
    }

    // 8. Калькулятор возведения в степень
    public static double power(double base, int exponent) {
        if (exponent < 0) throw new IllegalArgumentException("Отрицательная степень: " + exponent);
        return Math.pow(base, exponent);
    }

    // 9. Обрезка строки
    public static String trimString(String str, int length) {
        if (length > str.length())
            throw new IllegalArgumentException("Длина больше длины строки: " + length);
        return str.substring(0, length);
    }

    // 10. Поиск элемента в массиве и исправленный метод
    public static int findInArray(int[] array, int element) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] == element) return i; // Возврат индекса элемента
        }
        throw new IllegalArgumentException("Элемент не найден в массиве: " + element);
    }

    // 11. Конвертация в двоичную систему
    public static String toBinary(int number) {
        if (number < 0) throw new IllegalArgumentException("Отрицательное число: " + number);
        return Integer.toBinaryString(number);
    }

    // 12. Проверка делимости
    public static void checkDivisibility(int a, int b) {
        if (b == 0) throw new ArithmeticException("Деление на ноль недопустимо!");
        if (a % b != 0) throw new IllegalArgumentException(a + " не делится на " + b);
    }

    // 13. Чтение элемента списка
    public static String readListElement(java.util.List<String> list, int index) {
        if (index < 0 || index >= list.size())
            throw new IndexOutOfBoundsException("Индекс выходит за пределы списка: " + index);
        return list.get(index);
    }

    // 14. Проверка пароля
    public static void checkPasswordStrength(String password) {
        if (password.length() < 8) {
            throw new WeakPasswordException("Слабый пароль: менее 8 символов.");
        }

        boolean hasDigit = password.matches(".*\\d.*");
        boolean hasUpper = password.matches(".*[A-Z].*");
        boolean hasLower = password.matches(".*[a-z].*");
        boolean hasSpecial = password.matches(".*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?].*");

        if (hasUpper && hasLower && hasDigit && hasSpecial) {
            System.out.println("Пароль сильный!");
        } else if (hasUpper && hasLower && hasDigit) {
            System.out.println("Пароль средней силы.");
        } else {
            throw new WeakPasswordException("Слабый пароль: должен содержать хотя бы одну заглавную букву, строчную букву, и цифру.");
        }
    }

    // 15. Проверка даты
    public static void checkDate(String date) {
        try {
            java.time.LocalDate parsedDate = java.time.LocalDate.parse(date, java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy"));
            String formattedDate = parsedDate.format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy"));
            if (!formattedDate.equals(date)) {
                throw new IllegalArgumentException("Некорректная дата: " + date);
            }
        } catch (DateTimeParseException e) {
            throw new IllegalArgumentException("Некорректный формат даты: " + date);
        }
    }


    // 16. Конкатенация строк
    public static String concatenate(String str1, String str2) {
        if (str1 == null) {
            throw new NullPointerException("Первая строка равна null!");
        }
        if (str2 == null) {
            throw new NullPointerException("Вторая строка равна null!");
        }
        return str1 + str2;
    }

    // 17. Остаток от деления
    public static int remainder(int a, int b) {
        if (b == 0) throw new ArithmeticException("Деление на ноль недопустимо!");
        return a % b;
    }

    // 18. Квадратный корень
    public static double squareRoot(double number) {
        if (number < 0) throw new IllegalArgumentException("Отрицательное число: " + number);
        return Math.sqrt(number);
    }

    // 19. Конвертер температуры
    public static double celsiusToFahrenheit(double celsius) {
        if (celsius < -273.15) throw new IllegalArgumentException("Температура ниже абсолютного нуля: " + celsius);
        return (celsius * 9/5) + 32;
    }

    // 20. Проверка строки на пустоту
    public static void checkString(String str) {
        if (str == null || str.isEmpty()) throw new IllegalArgumentException("Строка пуста или равна null.");
    }

    // Пользовательское исключение для слабого пароля
    public static class WeakPasswordException extends RuntimeException {
        public WeakPasswordException(String message) {
            super(message);
        }
    }
}
